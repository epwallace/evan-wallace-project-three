@import 'setup';
@import 'svgBackgrounds';

body {
    // text properties
    color: #acacac;
    font-size: 125%;
    font-family: 'Lobster',
}

.wrapper {
    // box properties
    max-width: 1200px;
    width: 80%;
    margin: 0 auto;
}

header {
    // flex properties
    display: flex;
    justify-content: center;
    align-items: center;
}

h1 {
    // box properties
    width: 100%;
    padding: 50px;
    margin-top: 50px;
    border-radius: 20px;
    border: 3px solid #2a2a2a;

    // text properties
    font-family: 'Lobster', cursive;
    font-size: calc(1.5rem + (20 - 1.5) * (100vw - 320px) / (1200 - 320));
    text-align: center;
}

.gameContainer {
    // flex properties
    display: flex;
    flex-direction: column;
}
.gameControls {
    // box properties
    margin-top: 50px;

    // grid properties
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto;
    grid-gap: 50px;
}

/* lite-brite grid */
.board {
    // box properties
    width: 100%;
    margin: 50px auto;
    /* This is a design choice.
       The user's initial viewport determines the size of their grid.
       If a user starts with a large viewport and resizes to mobile,
       the default square/dot size will cause the game board to break out of its container.
       If the squares/dots are allowed to shrink, they will be too small to click easily.
       If outer squares/dots are removed to shrink the board size, the user's art might be lost.
       I consider permitting scrolling in the game board to be the best solution in this situation. */
    overflow: scroll;

    // grid properties
    display: grid;
    grid-template-rows: repeat(20, 1fr);
    grid-template-columns: repeat(20, 1fr);
    grid-gap: 5px;
    
}

/* clickable "squares" of the lite-brite grid */
.square {
    background-color: #121212;

    // box properties
    width: 100%;
    min-width: 15px;
    height: 100%;
    min-height: 15px;
    border-radius: 50%;

    // flex properties
    display: flex;
    justify-content: center;
    align-items: center;
}

.dot {
    width: 40%;
    height: 40%;
    border-radius: 50%;
    opacity: 50%;
}

/* styles for applying colors to dots */
@mixin dotColor($color) {
    background-color: $color;
    color: $color;  // provides default box-shadow color

}

.red { @include dotColor(red); }
.orange { @include dotColor(orange); }
.yellow { @include dotColor(yellow); }
.green { @include dotColor(lime); }
.blue { @include dotColor(cyan); }
.purple { @include dotColor(rebeccapurple); }
.pink { @include dotColor(fuchsia); }
.white { @include dotColor(white); }

.lightup {
    /* glow effect inspired by https://codersblock.com/blog/creating-glow-effects-with-css/ */
    box-shadow:
        0 0 3px 2px,
        0 0 5px 3px white,
        0 0 7px 3px;
        opacity: 100%;
}

/* general style for a game control panel */
.controlPanel {
    // box properties
    width: 100%;
    height: 100%;
    padding: 20px;
    border: 3px solid #2a2a2a;
    border-radius: 20px;

    // flex properties
    display: flex;
    justify-content: space-between;
    align-items: center;

    // text properties
    p,
    .panelText {
        font-family: 'Lobster', cursive;
        font-size: calc(1.4rem + (3 - 1.4) * (100vw - 320px) / (1200 - 320));
    }

}

/* color selection panel styles */
.colorSelectionPanel {
    grid-column: 1 / span 1;

}

.colorSelectionPanel ul {
    // box properties
    width: min-content;

    // grid properties
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(2, 1fr);
}

.colorChoice {
    // box properties
    width: 30px;
    height: 30px;
    margin: 5px;

    // special states
    &.active,
    &:hover {
        border: 3px solid #acacac;
    }
}

/* lightswitch panel styles */
.lightswitchPanel {
    // grid properties
    grid-column: 2 / span 1;

    // checkbox properties
    input {
        width: 40px;
        height: 40px;

    }

    input + label::before {
        display: inline-block;
        border: 2px solid #eee;
        content: ' ';
        height: 40px;
        width: 40px;
        position: relative;
        left: -30px;
    }
}

.instructions {
    // flex properties
    flex-direction: column;

    // grid properties
    grid-row: 2;
    grid-column: 1 / span 2;

    // text properties
    text-align: center;
    text-transform: lowercase;

    /* add spacing between paragraphs */
    p:first-child {
        margin-bottom: 20px;
    }
}

footer {
    // box properties
    padding: 20px;
    border-top: 3px solid #2a2a2a;

    // font properties
    text-align: center;
    text-transform: lowercase;

    // link properties
    a {
        background-color: rgba(255, 255, 255, 0.1);
        color: #acacac;
        padding: 10px 15px;
        border-radius: 20px;
        text-decoration: none;
        margin: 0 2px;
        display: inline-block;

        &:hover {
            background-color: white;
            color: #2a2a2a;
        }
    }
}

@media (max-width: 800px) {
    /* switch to column layout */
    .gameControls {
        display: flex;
        flex-direction: column;
    }

    .controlPanel {
        flex-basis: 100%;
    }

    .instructions {
        align-items: flex-start;
    }
    .instructions p {
        text-align: left;
    }
}

@media (max-width: 480px) {
    /* reduce congestion in the color selection panel */
    .colorChoice {
        width: 22px;
        height: 22px;
    }

    /* switch footer text to column layout */
    footer {
        .panelText {
            font-size: 1.9rem;
            text-align: center;
        }

        a {
            display: block;
            width: max-content;
            padding: 5px 10px;
            margin: 10px auto;
        }

    }
}